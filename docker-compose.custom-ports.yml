version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: aml_monitoring
      POSTGRES_USER: aml_user
      POSTGRES_PASSWORD: secure_password
    ports:
      - "5433:5432"  # Custom port to avoid conflict
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aml-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aml_user -d aml_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6380:6379"  # Custom port to avoid conflict
    volumes:
      - redis-data:/data
    networks:
      - aml-network
    restart: always
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  aml-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aml-backend
    environment:
      DATABASE_URL: postgresql://aml_user:secure_password@postgres:5432/aml_monitoring
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      CORS_ORIGINS: "*"
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"  # Backend API port
    volumes:
      - ./app:/app/app:ro
    networks:
      - aml-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  aml-frontend:
    image: nginx:alpine
    container_name: aml-frontend
    ports:
      - "8888:80"  # Custom port to avoid conflict with port 80
    volumes:
      - ./aml-frontend/build:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - aml-network
    depends_on:
      - aml-backend
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  aml-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16