version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aml_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-aml_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aml_password}
      POSTGRES_DB: ${DB_NAME:-aml_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    networks:
      - aml_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aml_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: aml_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - aml_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aml_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-aml_user}:${DB_PASSWORD:-aml_password}@postgres:5432/${DB_NAME:-aml_db}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      WEBHOOK_TOKEN: ${WEBHOOK_TOKEN:-your-webhook-token}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./app:/app/app
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aml_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./aml-frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000/api/v1}
    container_name: aml_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000/api/v1}
    volumes:
      - frontend_build:/app/build
    depends_on:
      - backend
    networks:
      - aml_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aml_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_SSL_PORT:-8443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - frontend_build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - aml_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  frontend_build:
    driver: local
  nginx_logs:
    driver: local

networks:
  aml_network:
    driver: bridge
